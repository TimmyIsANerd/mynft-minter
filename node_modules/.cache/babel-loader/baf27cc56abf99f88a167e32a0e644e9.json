{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adefe\\\\Downloads\\\\Compressed\\\\mynft-minter\\\\src\\\\App.js\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport MyEpicNFT from \"./utils/MyEpicNFT.json\"; // Constants\n\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0xB0dDa81814730abD6Fe3308C634F599D75Cea5DC\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [mintCount, setMintCount] = useState(0);\n  const [NFTmessage, setNFTMessage] = useState(\"\");\n  const [NFTlink, setNFTLink] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask\");\n      return;\n    } else {\n      console.log(\"Wallet Connected\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    }); // User can have multiple authorized accounts\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  /*\n   * Implement your connectWallet method here\n   */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\n       * Fancy method to request access to account.\n       */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Setup Our Listener\n\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNFT.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber()); // alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n\n          setNFTMessage(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the Link:`);\n          setNFTLink(`https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNFT.abi, signer);\n        let mintCount = await connectedContract.getTotalNoOfAttempts();\n        console.log(\"Retrieved Total No. of Attempts\", mintCount.toNumber());\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining Transaction...please wait.\");\n        await nftTxn.wait();\n        mintCount = await connectedContract.getTotalNoOfAttempts();\n        console.log(\"Retrieved Total No. of Attempts\", mintCount.toNumber());\n        setMintCount(mintCount.toNumber());\n        console.log(`Transaction Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); // Render Methods\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, \"Connect to Wallet\");\n\n  const messageStyle = {\n    fontSize: \"18px\",\n    margin: \"15px auto\",\n    width: \"60%\"\n  }; // Render Message\n\n  const NFTMintedMessage = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: messageStyle,\n      className: \"gradient-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 7\n      }\n    }, NFTmessage, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: NFTlink,\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, NFTlink));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"header gradient-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, \"Fight Results NFT Collection\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, \"Each unique. Each beautiful. Discover your NFT today. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 67\n    }\n  }), \"You have minted \", mintCount, \"/\", TOTAL_MINT_COUNT, \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"gradient-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 60\n    }\n  }, \"NFTs\")), NFTmessage ? /*#__PURE__*/React.createElement(NFTMintedMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }) : \"\", currentAccount === \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, renderNotConnectedContainer()) : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, \"Mint NFT\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, `built on @${TWITTER_HANDLE}`))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/adefe/Downloads/Compressed/mynft-minter/src/App.js"],"names":["React","useEffect","useState","ethers","MyEpicNFT","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","mintCount","setMintCount","NFTmessage","setNFTMessage","NFTlink","setNFTLink","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","toNumber","askContractToMintNft","getTotalNoOfAttempts","nftTxn","makeAnEpicNFT","wait","hash","renderNotConnectedContainer","messageStyle","fontSize","margin","width","NFTMintedMessage","twitterLogo"],"mappings":"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","sourcesContent":["import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport MyEpicNFT from \"./utils/MyEpicNFT.json\";\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0xB0dDa81814730abD6Fe3308C634F599D75Cea5DC\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [mintCount, setMintCount] = useState(0);\n  const [NFTmessage, setNFTMessage] = useState(\"\");\n  const [NFTlink, setNFTLink] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask\");\n      return;\n    } else {\n      console.log(\"Wallet Connected\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    // User can have multiple authorized accounts\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Setup Our Listener\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          MyEpicNFT.abi,\n          signer\n        );\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          // alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n          setNFTMessage(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the Link:`\n          );\n          setNFTLink(\n            `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          MyEpicNFT.abi,\n          signer\n        );\n\n        let mintCount = await connectedContract.getTotalNoOfAttempts();\n        console.log(\"Retrieved Total No. of Attempts\", mintCount.toNumber());\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining Transaction...please wait.\");\n        await nftTxn.wait();\n\n        mintCount = await connectedContract.getTotalNoOfAttempts();\n        console.log(\"Retrieved Total No. of Attempts\", mintCount.toNumber());\n        setMintCount(mintCount.toNumber())\n\n        console.log(\n          `Transaction Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n  const messageStyle = {\n    fontSize: \"18px\",\n    margin: \"15px auto\",\n    width:\"60%\"\n  };\n  // Render Message\n  const NFTMintedMessage = () => {\n    return (\n      <div style={messageStyle} className=\"gradient-text\">\n        {NFTmessage} <br />\n        <a href={NFTlink} target=\"_blank\">\n          {NFTlink}\n        </a>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Fight Results NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today. <br/>\n            You have minted {mintCount}/{TOTAL_MINT_COUNT} <span className=\"gradient-text\">NFTs</span>\n          </p>\n          {NFTmessage ? (\n            <NFTMintedMessage />\n          ) : \"\"}\n          {currentAccount === \"\" ? (\n            <div>{renderNotConnectedContainer()}</div>\n          ) : (\n            <button\n              onClick={askContractToMintNft}\n              className=\"cta-button connect-wallet-button\"\n            >\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}