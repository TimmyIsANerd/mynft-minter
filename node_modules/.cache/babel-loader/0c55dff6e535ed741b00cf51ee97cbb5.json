{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adefe\\\\Downloads\\\\Compressed\\\\mynft-minter\\\\src\\\\App.js\";\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport MyEpicNFT from './utils/MyEpicNFT.json'; // Constants\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x91792B95F8398E0211c94d13Ae6d1b2A54CbaDCa\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [mintCount, setMintCount] = useState(0);\n  const [showMintCount, setShowMintCount] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask\");\n      return;\n    } else {\n      console.log(\"Wallet Connected\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    }); // User can have multiple authorized accounts\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  /*\n   * Implement your connectWallet method here\n   */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\n      * Fancy method to request access to account.\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Setup Our Listener\n\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNFT.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNFT.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining Transaction...please wait.\");\n        await nftTxn.wait();\n        console.log(`Transaction Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); // Render Methods\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, \"Connect to Wallet\");\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"header gradient-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, \"My NFT Collection\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, \"Each unique. Each beautiful. Discover your NFT today.\"), currentAccount === \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, renderNotConnectedContainer()) : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, \"Mint NFT\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, `built on @${TWITTER_HANDLE}`))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/adefe/Downloads/Compressed/mynft-minter/src/App.js"],"names":["React","useEffect","useState","ethers","MyEpicNFT","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","mintCount","setMintCount","showMintCount","setShowMintCount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","connectWallet","alert","error","setupEventListener","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","renderNotConnectedContainer","twitterLogo"],"mappings":"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","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport MyEpicNFT from './utils/MyEpicNFT.json'\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0x91792B95F8398E0211c94d13Ae6d1b2A54CbaDCa\";\nconst App = () => {\n\tconst [currentAccount, setCurrentAccount] = useState(\"\");\n\tconst [mintCount, setMintCount] = useState(0);\n\tconst [showMintCount,setShowMintCount] = useState(false);\n\tconst checkIfWalletIsConnected = async () =>{\n\n\t\tconst { ethereum } = window;\n\n\t\tif(!ethereum){\n\t\t\tconsole.log(\"Make sure you have MetaMask\");\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log(\"Wallet Connected\", ethereum);\n\t\t}\n\n\t\tconst accounts = await ethereum.request({method: 'eth_accounts'});\n\n\t\t// User can have multiple authorized accounts\n\t\tif(accounts.length !== 0){\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log(\"Found an authorized account:\", account);\n\t\t\tsetCurrentAccount(account)\n\t\t} else {\n\t\t\tconsole.log(\"No authorized account found\")\n\t\t}\n\t}\n\n\t/*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\t// Setup Our Listener\n\tconst setupEventListener = async () =>{\n\t\t// Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNFT.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n\t}\n\n\tconst askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNFT.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining Transaction...please wait.\")\n        await nftTxn.wait();\n        \n        console.log(`Transaction Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n}\n\n\tuseEffect(()=>{\n\t\tcheckIfWalletIsConnected();\n\t}, [])\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{renderNotConnectedContainer()}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n\t\t\t\t\t\t\tMint NFT\n\t\t\t\t\t\t</button>\n\t\t\t\t\t)}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}