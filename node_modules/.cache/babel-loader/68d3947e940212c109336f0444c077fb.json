{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\adefe\\\\Downloads\\\\Compressed\\\\mynft-minter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\adefe\\\\Downloads\\\\Compressed\\\\mynft-minter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\adefe\\\\Downloads\\\\Compressed\\\\mynft-minter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import\"./styles/App.css\";import twitterLogo from\"./assets/twitter-logo.svg\";import React,{useEffect,useState}from\"react\";import{ethers}from\"ethers\";import MyEpicNFT from\"./utils/MyEpicNFT.json\";// Constants\nvar TWITTER_HANDLE=\"timmyisanerd_\";var TWITTER_LINK=\"https://twitter.com/\".concat(TWITTER_HANDLE);var OPENSEA_LINK=\"https://testnets.opensea.io/collection/timmynft\";var TOTAL_MINT_COUNT=50;var CONTRACT_ADDRESS=\"0xB0dDa81814730abD6Fe3308C634F599D75Cea5DC\";var App=function App(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),mintCount=_useState4[0],setMintCount=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),NFTmessage=_useState6[0],setNFTMessage=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),NFTlink=_useState8[0],setNFTLink=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isMinting=_useState10[0],setIsMinting=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),networkMessage=_useState12[0],setNetworkMessage=_useState12[1];var connectionStatus=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,chainId,rinkebyChainId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_window=window,ethereum=_window.ethereum;if(ethereum){_context.next=6;break;}setNetworkMessage(\"Make sure you have MetaMask\");return _context.abrupt(\"return\");case 6:_context.next=8;return ethereum.request({method:\"eth_chainId\"});case 8:chainId=_context.sent;console.log(\"Connected to chain \"+chainId);// String, hex code of the chainId of the Rinkebey test network\nrinkebyChainId=\"0x4\";if(!(chainId!==rinkebyChainId)){_context.next=16;break;}setNetworkMessage(\"You are not connected to the Rinkeby Test Network! Minting isn't possible!\");return _context.abrupt(\"return\",true);case 16:if(chainId===rinkebyChainId){setNetworkMessage(\"You are connected to the Rinkeby Test Network\");}case 17:case\"end\":return _context.stop();}}},_callee);}));return function connectionStatus(){return _ref.apply(this,arguments);};}();var checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,ethereum,provider,signer,connectedContract,_mintCount,accounts,account;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_window2=window,ethereum=_window2.ethereum;if(ethereum){_context2.next=6;break;}console.log(\"Make sure you have MetaMask\");return _context2.abrupt(\"return\");case 6:connectionStatus();console.log(\"Wallet Connected\",ethereum);provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,MyEpicNFT.abi,signer);_context2.next=13;return connectedContract.getTotalNoOfAttempts();case 13:_mintCount=_context2.sent;console.log(\"Retrieved Total No. of Attempts\",_mintCount.toNumber());setMintCount(_mintCount.toNumber());case 16:_context2.next=18;return ethereum.request({method:\"eth_accounts\"});case 18:accounts=_context2.sent;// User can have multiple authorized accounts\nif(accounts.length!==0){account=accounts[0];console.log(\"Found an authorized account:\",account);setCurrentAccount(account);setupEventListener();}else{console.log(\"No authorized account found\");}case 20:case\"end\":return _context2.stop();}}},_callee2);}));return function checkIfWalletIsConnected(){return _ref2.apply(this,arguments);};}();/*\n   * Implement your connectWallet method here\n   */var connectWallet=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _window3,ethereum,accounts,provider,signer,connectedContract,_mintCount2;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_window3=window,ethereum=_window3.ethereum;if(ethereum){_context3.next=5;break;}alert(\"Get MetaMask!\");return _context3.abrupt(\"return\");case 5:_context3.next=7;return ethereum.request({method:\"eth_requestAccounts\"});case 7:accounts=_context3.sent;/*\n       * Boom! This should print out public address once we authorize Metamask.\n       */console.log(\"Connected\",accounts[0]);setCurrentAccount(accounts[0]);connectionStatus();provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,MyEpicNFT.abi,signer);_context3.next=16;return connectedContract.getTotalNoOfAttempts();case 16:_mintCount2=_context3.sent;console.log(\"Retrieved Total No. of Attempts\",_mintCount2.toNumber());setMintCount(_mintCount2.toNumber());// Setup listener! This is for the case where a user comes to our site\n// and connected their wallet for the first time.\nsetupEventListener();_context3.next=25;break;case 22:_context3.prev=22;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);case 25:case\"end\":return _context3.stop();}}},_callee3,null,[[0,22]]);}));return function connectWallet(){return _ref3.apply(this,arguments);};}();// Setup Our Listener\nvar setupEventListener=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _window4,ethereum,provider,signer,connectedContract;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:// Most of this looks the same as our function askContractToMintNft\ntry{_window4=window,ethereum=_window4.ethereum;if(ethereum){// Same stuff again\nprovider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,MyEpicNFT.abi,signer);// THIS IS THE MAGIC SAUCE.\n// This will essentially \"capture\" our event when our contract throws it.\n// If you're familiar with webhooks, it's very similar to that!\nconnectedContract.on(\"NewEpicNFTMinted\",function(from,tokenId){console.log(from,tokenId.toNumber());// alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\nsetNFTMessage(\"Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the Link:\");setNFTLink(\"https://testnets.opensea.io/assets/\".concat(CONTRACT_ADDRESS,\"/\").concat(tokenId.toNumber()));});console.log(\"Setup event listener!\");}else{console.log(\"Ethereum object doesn't exist!\");}}catch(error){console.log(error);}case 1:case\"end\":return _context4.stop();}}},_callee4);}));return function setupEventListener(){return _ref4.apply(this,arguments);};}();var askContractToMintNft=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var _window5,ethereum,provider,signer,connectedContract,_mintCount3,nftTxn;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_window5=window,ethereum=_window5.ethereum;if(!ethereum){_context5.next=27;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,MyEpicNFT.abi,signer);setIsMinting(true);_context5.next=9;return connectedContract.getTotalNoOfAttempts();case 9:_mintCount3=_context5.sent;console.log(\"Retrieved Total No. of Attempts\",_mintCount3.toNumber());console.log(\"Going to pop wallet now to pay gas...\");_context5.next=14;return connectedContract.makeAnEpicNFT();case 14:nftTxn=_context5.sent;console.log(\"Mining Transaction...please wait.\");_context5.next=18;return nftTxn.wait();case 18:_context5.next=20;return connectedContract.getTotalNoOfAttempts();case 20:_mintCount3=_context5.sent;console.log(\"Retrieved Total No. of Attempts\",_mintCount3.toNumber());setMintCount(_mintCount3.toNumber());console.log(\"Transaction Mined, see transaction: https://rinkeby.etherscan.io/tx/\".concat(nftTxn.hash));setIsMinting(false);_context5.next=28;break;case 27:console.log(\"Ethereum object doesn't exist!\");case 28:_context5.next=33;break;case 30:_context5.prev=30;_context5.t0=_context5[\"catch\"](0);console.log(_context5.t0);case 33:case\"end\":return _context5.stop();}}},_callee5,null,[[0,30]]);}));return function askContractToMintNft(){return _ref5.apply(this,arguments);};}();var messageStyle={fontSize:\"18px\",margin:\"15px auto\",width:\"60%\"};var Rinkeby=function Rinkeby(){return/*#__PURE__*/React.createElement(\"div\",{style:messageStyle,className:\"gradient-text\"},networkMessage);};useEffect(function(){checkIfWalletIsConnected();},[]);// Render Methods\nvar renderNotConnectedContainer=function renderNotConnectedContainer(){return/*#__PURE__*/React.createElement(\"button\",{onClick:connectWallet,className:\"cta-button connect-wallet-button\"},\"Connect to Wallet\");};// Render Message\nvar NFTMintedMessage=function NFTMintedMessage(){return/*#__PURE__*/React.createElement(\"div\",{style:messageStyle,className:\"gradient-text\"},NFTmessage,\" \",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"a\",{href:NFTlink,target:\"_blank\"},NFTlink),\" \",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"a\",{href:OPENSEA_LINK,target:\"_blank\"},/*#__PURE__*/React.createElement(\"button\",{className:\"cta-button gradient-text\"},\"\\uD83C\\uDF0A View Collection on OpenSea\")));};// Loading Animation\nvar Loader=function Loader(){return/*#__PURE__*/React.createElement(\"div\",{class:\"out\"},/*#__PURE__*/React.createElement(\"div\",{class:\"fade-in\"},/*#__PURE__*/React.createElement(\"div\",{class:\"gradient-text\"},\"Minting NFT...\")));};var showLoader=function showLoader(){setIsMinting(true);};var MintButton=function MintButton(){return/*#__PURE__*/React.createElement(\"button\",{onClick:askContractToMintNft,className:\"cta-button connect-wallet-button\"},\"Mint NFT\");};return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"header-container\"},/*#__PURE__*/React.createElement(\"p\",{className:\"header gradient-text\"},\"Fight Results NFT Collection\"),/*#__PURE__*/React.createElement(\"p\",{className:\"sub-text\"},\"Each unique. Each beautiful. Discover your NFT today. \",/*#__PURE__*/React.createElement(\"br\",null),\"You have minted \",mintCount,\"/\",TOTAL_MINT_COUNT,\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"gradient-text\"},\"NFTs\")),isMinting?/*#__PURE__*/React.createElement(Loader,null):\"\",connectionStatus?/*#__PURE__*/React.createElement(Rinkeby,null):\"\",NFTmessage?/*#__PURE__*/React.createElement(NFTMintedMessage,null):\"\",currentAccount===\"\"?/*#__PURE__*/React.createElement(\"div\",null,renderNotConnectedContainer()):/*#__PURE__*/React.createElement(MintButton,null)),/*#__PURE__*/React.createElement(\"div\",{className:\"footer-container\"},/*#__PURE__*/React.createElement(\"img\",{alt:\"Twitter Logo\",className:\"twitter-logo\",src:twitterLogo}),/*#__PURE__*/React.createElement(\"a\",{className:\"footer-text\",href:TWITTER_LINK,target:\"_blank\",rel:\"noreferrer\"},\"@\".concat(TWITTER_HANDLE)))));};export default App;","map":{"version":3,"sources":["C:/Users/adefe/Downloads/Compressed/mynft-minter/src/App.js"],"names":["React","useEffect","useState","ethers","MyEpicNFT","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","mintCount","setMintCount","NFTmessage","setNFTMessage","NFTlink","setNFTLink","isMinting","setIsMinting","networkMessage","setNetworkMessage","connectionStatus","window","ethereum","request","method","chainId","console","log","rinkebyChainId","checkIfWalletIsConnected","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","getTotalNoOfAttempts","toNumber","accounts","length","account","setupEventListener","connectWallet","alert","on","from","tokenId","error","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","messageStyle","fontSize","margin","width","Rinkeby","renderNotConnectedContainer","NFTMintedMessage","Loader","showLoader","MintButton","twitterLogo"],"mappings":"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","sourcesContent":["import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport MyEpicNFT from \"./utils/MyEpicNFT.json\";\n\n// Constants\nconst TWITTER_HANDLE = \"timmyisanerd_\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/collection/timmynft\";\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0xB0dDa81814730abD6Fe3308C634F599D75Cea5DC\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [mintCount, setMintCount] = useState(0);\n  const [NFTmessage, setNFTMessage] = useState(\"\");\n  const [NFTlink, setNFTLink] = useState(\"\");\n  const [isMinting, setIsMinting] = useState(false);\n  const [networkMessage, setNetworkMessage] = useState(\"\");\n\n  const connectionStatus = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      setNetworkMessage(\"Make sure you have MetaMask\");\n      return;\n    } else {\n      let chainId = await ethereum.request({ method: \"eth_chainId\" });\n      console.log(\"Connected to chain \" + chainId);\n\n      // String, hex code of the chainId of the Rinkebey test network\n      const rinkebyChainId = \"0x4\";\n      if (chainId !== rinkebyChainId) {\n        setNetworkMessage(\n          \"You are not connected to the Rinkeby Test Network! Minting isn't possible!\"\n        );\n        return true;\n      } else if (chainId === rinkebyChainId) {\n        setNetworkMessage(\"You are connected to the Rinkeby Test Network\");\n      }\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask\");\n      return;\n    } else {\n      connectionStatus();\n      console.log(\"Wallet Connected\", ethereum);\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const connectedContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        MyEpicNFT.abi,\n        signer\n      );\n\n      let mintCount = await connectedContract.getTotalNoOfAttempts();\n      console.log(\"Retrieved Total No. of Attempts\", mintCount.toNumber());\n      setMintCount(mintCount.toNumber());\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    // User can have multiple authorized accounts\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      connectionStatus();\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const connectedContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        MyEpicNFT.abi,\n        signer\n      );\n\n      let mintCount = await connectedContract.getTotalNoOfAttempts();\n      console.log(\"Retrieved Total No. of Attempts\", mintCount.toNumber());\n      setMintCount(mintCount.toNumber());\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Setup Our Listener\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          MyEpicNFT.abi,\n          signer\n        );\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          // alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n          setNFTMessage(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the Link:`\n          );\n          setNFTLink(\n            `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          MyEpicNFT.abi,\n          signer\n        );\n        setIsMinting(true);\n        let mintCount = await connectedContract.getTotalNoOfAttempts();\n        console.log(\"Retrieved Total No. of Attempts\", mintCount.toNumber());\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining Transaction...please wait.\");\n        await nftTxn.wait();\n\n        mintCount = await connectedContract.getTotalNoOfAttempts();\n        console.log(\"Retrieved Total No. of Attempts\", mintCount.toNumber());\n        setMintCount(mintCount.toNumber());\n\n        console.log(\n          `Transaction Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n        setIsMinting(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const messageStyle = {\n    fontSize: \"18px\",\n    margin: \"15px auto\",\n    width: \"60%\",\n  };\n\n  const Rinkeby = () => (\n    <div style={messageStyle} className=\"gradient-text\">\n      {networkMessage}\n    </div>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // Render Message\n  const NFTMintedMessage = () => {\n    return (\n      <div style={messageStyle} className=\"gradient-text\">\n        {NFTmessage} <br />\n        <a href={NFTlink} target=\"_blank\">\n          {NFTlink}\n        </a>{\" \"}\n        <br />\n        <a href={OPENSEA_LINK} target=\"_blank\">\n          <button className=\"cta-button gradient-text\">🌊 View Collection on OpenSea</button>\n        </a>\n      </div>\n    );\n  };\n  // Loading Animation\n  const Loader = () => {\n    return (\n      <div class=\"out\">\n        <div class=\"fade-in\">\n          {/* <div class=\"loader_container\">\n            <div class=\"one common\"></div>\n            <div class=\"two common\"></div>\n            <div class=\"three common\"></div>\n            <div class=\"four common\"></div>\n            <div class=\"five common\"></div>\n            <div class=\"six common\"></div>\n            <div class=\"seven common\"></div>\n            <div class=\"eight common\"></div>\n          </div> */}\n          <div class=\"gradient-text\">Minting NFT...</div>\n          {/* <div class=\"bar\">\n            <div class=\"progress\"></div>\n          </div> */}\n        </div>\n      </div>\n    );\n  };\n  const showLoader = () => {\n    setIsMinting(true);\n  };\n  const MintButton = () => (\n    <button\n      onClick={askContractToMintNft}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Mint NFT\n    </button>\n  );\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Fight Results NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today. <br />\n            You have minted {mintCount}/{TOTAL_MINT_COUNT}{\" \"}\n            <span className=\"gradient-text\">NFTs</span>\n          </p>\n          {isMinting ? <Loader /> : \"\"}\n          {connectionStatus ? <Rinkeby /> : \"\"}\n          {NFTmessage ? <NFTMintedMessage /> : \"\"}\n          {currentAccount === \"\" ? (\n            <div>{renderNotConnectedContainer()}</div>\n          ) : (\n            <MintButton />\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`@${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}